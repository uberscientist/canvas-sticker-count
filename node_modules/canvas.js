var request = require('request');
var redis = require('redis');

var db = redis.createClient();

var limiting = null;

function startInterval(id, offset, posts, update, callback){
  var c = -1;

  limiting = setInterval(function(){
    c++;

    if(posts.length < 1){
      clearInterval(limiting);
      limiting = null;
      console.log('No more posts!');
      callback();
      return;
    }

    request(posts[c].api_url, function(err, res, body){
      var body = JSON.parse(body);

      //array of objects, each representing a type of sticker
      var stickers = body.stickers;
      for(var i = 0; i < stickers.length; i++){
        db.zincrby('stickers:'+id, stickers[i].count, stickers[i].name, function(err){
          if(err) throw err;
          update();
        });
      }

    });

    if(c == posts.length - 1){

      //Increase our offset length for our next loop
      if(posts.length == 10){
        offset += 10;
      }

      clearInterval(limiting);
      limiting = null;
      exports.getStickers(id, offset, update, callback);
    }
  }, 1000);
}

exports.getStickers = function(id, offset, update, callback){

  console.log('username: ' + id + ' offset: ' + offset);

  var offset_json = {
    ids: [{user: id, skip: offset}]
  }

  var options = {
    uri: 'http://canv.as/public_api/users/',
    host: 'http://canv.as',
    path: '/public_api/users/',
    method: 'POST',
    body: JSON.stringify(offset_json)
  }

  request(options, function(err, res, body){
    var body = JSON.parse(body);

    if(body.success == false || body.users.length == 0){
      //Too fast OR no such user
      callback();

    } else {

      //Pass the posts to the interval function
      var posts = body.users[0].posts;
      startInterval(id, offset, posts, update, callback);

    }
  });

}
